openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks and user authentication.
servers:
  - url: http://localhost:5000
paths:
  /login:
    post:
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success! redirecting in 1sec..
                  access_token:
                    type: string
                    example: your_jwt_access_token
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email and password are required!
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User doesn't exist! Register First.

  /register:
    post:
      summary: User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: newuser
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registered! You can log in 2sec....
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All fields are required!

  /tasks:
    get:
      summary: Get User Tasks
      security:
        - jwt: []
      responses:
        '200':
          description: A list of tasks for the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    completed:
                      type: boolean
        '404':
          description: No tasks found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No task left for you to complete!

    post:
      summary: Create a New Task
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: New Task
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task Added Successfully!
                  task:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      completed:
                        type: boolean
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task title is required

  /tasks/{id}:
    put:
      summary: Update an Existing Task
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Task Title
                completed:
                  type: boolean
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task Updated Successfully!
                  task:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      completed:
                        type: boolean
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No Task Found for this user!

    delete:
      summary: Delete a Task
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task Deleted Successfully!
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No Task Found for this user!

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
